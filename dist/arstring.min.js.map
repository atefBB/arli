{"version":3,"sources":["index.js"],"names":["global","_initStr","value","String","_isIn","arr","option","Array","isArray","indexOf","_regType","type","negative","result","_regs","ra","ran","ral","raln","ras","rasn","raa","raan","rae","raen","rap","rapn","rad","radn","_arabicNumbers","_arSpecialChars","_enSpecialChars","arabize","str","options","defaultOptions","_isArray","length","dateize","numerize","removeDash","i","replace","count","match","countRest","reverse","regArabicDate","extract","has","test","how","howRest","n","remove","extra","arstring","_VERSION","exports","module","define","amd","window"],"mappings":"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","file":"arstring.min.js","sourcesContent":["/**\n * @license\n * arstring.js 0.0.1\n * https://elkebirmed.github.io/arstring\n * (c) 2015 Mohamed Elkebir <elkebir.med@gmail.com>\n * arstring may be freely distributed under the MIT license.\n */\n(function(global) {\n\n  /************************************************\n   * Private constants to use inside the library. *\n   ************************************************/\n\n  /** Regular expression patterns. */\n  var _regs = {\n    ra:   /[\\u0621-\\u0652]/g, // Arabic characters.\n    ran:  /[^\\u0621-\\u0652]/g, // Non Arabic characters.\n    ral:  /[\\u0621-\\u063A\\u0641-\\u064A]/g, // Arabic letters.\n    raln: /[^\\u0621-\\u063A\\u0641-\\u064A]/g, // Non Arabic letters.\n    ras:  /[\\u0621-\\u063A\\u0640-\\u0652]/g, // Strict Arabic characters.\n    rasn: /[^\\u0621-\\u063A\\u0640-\\u0652]/g, // Non strict Arabic characters.\n    raa:  /[\\u0600-\\u06FF]/g, // All Arabic standard characters.\n    raan: /[^\\u0600-\\u06FF]/g, // Non all Arabic.\n    rae:  /[\\u0600-\\u06FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/g, // Every Arabic characters.\n    raen: /[^\\u0600-\\u06FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/g, // Non every Arabic characters.\n    rap:  /[\\u064B-\\u0652]/g, // Arabic punctuation characters.\n    rapn: /[^\\u064B-\\u0652]/g, // Non Arabic punctuation characters.\n    rad:  /[\\u0660-\\u0669]/g, // Arabic digits.\n    radn: /[^\\u0660-\\u0669]/g, // Non Arabic digits.\n  };\n\n  /** Arabic numbers list. */\n  var _arabicNumbers = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];\n\n  /** Special Arabic characters. */\n  var _arSpecialChars = [\n    '،', // Comma.\n    '؛', // SemiColon.\n    '؟', // Question Mark.\n    '٪', // Percent Sign.\n    '٭', // Asterisk.\n    '﴿', // Right parenthesis.\n    '﴾', // Left parenthesis.\n  ];\n\n  /** Special English characters. */\n  var _enSpecialChars = [\n    ',', // Comma.\n    ';', // SemiColon.\n    '?', // Question Mark.\n    '%', // Percent Sign.\n    '*', // Asterisk.\n    ')', // Right parenthesis.\n    '(', // Left parenthesis.\n  ];\n\n  /************************************************\n   * Private functions to use inside the library. *\n   ************************************************/\n\n  /**\n   * Checks if `value` is classified as a `String` primitive or object, and it's not empty.\n   *\n   * @private\n   * @param   {*} value - A value to check.\n   * @returns {Boolean} - Returns `true` if `value` is a string, `false` otherwise.\n   */\n  function _initStr(value) {\n    return (typeof value === 'string' || value instanceof String) && value !== 'undefined' && value !== '';\n  }\n\n  /**\n   * Checks if a `option` is in the `arr` array.\n   *\n   * @private\n   * @param {Array} arr - The array to search in.\n   * @param {String} option - The option to find in the array.\n   * @return {Boolean} - Returns `true` if `option` is inside `arr`, `false` otherwise.\n   */\n  function _isIn(arr, option) {\n    return Array.isArray(arr) && arr.indexOf(option) !== -1 ? true : false;\n  }\n\n  /**\n   * Extract a specified RegExp pattern from `_regs` object.\n   *\n   * @private\n   * @param {String} [type] - A pattern to be used.\n   * @param {Boolean} [negative] - Get the nehative pattern if set to `true`.\n   * @returns {RegExp} Returns a regular expression pattern.\n   */\n  function _regType(type, negative) {\n    var result;\n\n    switch (type) {\n      case 'strict':\n        result = 'ras';\n        break;\n      case 'all':\n        result = 'raa';\n        break;\n      case 'letter':\n        result = 'ral';\n        break;\n      case 'every':\n        result = 'rae';\n        break;\n      case 'punct':\n        result = 'rap';\n        break;\n      case 'digit':\n        result = 'rad';\n        break;\n      default:\n        result = 'ra';\n    }\n\n    return negative ? _regs[result + 'n'] : _regs[result];\n  }\n\n  /****************************************************\n   * Public constants to be exported with the module. *\n   ****************************************************/\n\n  /** Used as the semantic version number. */\n  var VERSION = '0.0.1';\n\n  /****************************************************\n   * Public functions to be exported with the module. *\n   ****************************************************/\n\n  var arabize = function(str, options) {\n    if (_initStr(str)) {\n      var defaultOptions = ['date', 'number', 'dash', 'char'];\n      options = options && _isArray(options) && options.length > 0 ? options : defaultOptions;\n\n      str = _isIn(options, 'date') && !_isIn(options, 'date-reverse') ? dateize(str) : str;\n      str = _isIn(options, 'date-reverse') ? dateize(str, true) : str;\n      str = _isIn(options, 'number') || _isIn(options, 'date') || _isIn(options, 'date-reverse') ? numerize(str) : str;\n      str = _isIn(options, 'dash') && !_isIn(options, 'dasg-extra') ? removeDash(str) : str;\n      str = _isIn(options, 'dash-extra') ? removeDash(str, true) : str;\n\n      if (_isIn(options, 'char')) {\n        for (var i = 0; i < _arSpecialChars.length; i++) {\n          str = str.replace(_enSpecialChars[i], _arSpecialChars[i]);\n        }\n      }\n\n      return str;\n    } else {\n      return str;\n    }\n  };\n\n  var count = function(str, type) {\n    if (_initStr(str)) {\n      return (str.match(_regType(type)) || '').length;\n    } else {\n      return 0;\n    }\n  };\n\n  var countRest = function(str, type) {\n    if (_initStr(str)) {\n      return (str.match(_regType(type, true)) || '').length;\n    } else {\n      return 0;\n    }\n  };\n\n  var dateize = function(str, reverse) {\n    if (_initStr(str)) {\n      var regArabicDate = /\\b([\\d]{2})[\\./،]([\\d]{2})[\\./،]([\\d]{2}|[\\d]{4})\\b/g;\n      return reverse ? str.replace(regArabicDate, '$2' + '؍' + '$1' + '؍' + '$3') : str.replace(regArabicDate, '$1' + '؍' + '$2' + '؍' + '$3');\n    } else {\n      return str;\n    }\n  };\n\n  var extract = function(str, type) {\n    if (_initStr(str)) {\n      return str.replace(_regType(type, true), '');\n    } else {\n      return str;\n    }\n  };\n\n  var has = function(str, type) {\n    if (_initStr(str)) {\n      return _regType(type).test(str) ? true : false;\n    } else {\n      return false;\n    }\n  };\n\n  var how = function(str, type) {\n    if (has(str, type)) {\n      return (count(str, type) / str.length) * 100;\n    } else {\n      return 0;\n    }\n  };\n\n  var howRest = function(str, type) {\n    return 100 - how(str, type);\n  };\n\n  var numerize = function(str) {\n    if (_initStr(str)) {\n      return str.replace(/[0-9]/g, function(n) {\n        return _arabicNumbers[+n];\n      });\n    } else {\n      return str;\n    }\n  };\n\n  var remove = function(str, type) {\n    if (_initStr(str)) {\n      return str.replace(_regType(type), '');\n    } else {\n      return str;\n    }\n  };\n\n  var removeDash = function(str, extra) {\n    if (_initStr(str)) {\n      return extra ? str.replace(/ـ{2,}/g, 'ـ') : str.replace(/ـ/g, '');\n    } else {\n      return str;\n    }\n  };\n\n  var arstring = {\n    _VERSION: _VERSION,\n    arabize: arabize,\n    count: count,\n    countRest: countRest,\n    dateize: dateize,\n    extract: extract,\n    has: has,\n    how: how,\n    howRest: howRest,\n    numerize: numerize,\n    remove: remove,\n    removeDash: removeDash,\n  };\n\n  // CommonJS, AMD, script tag\n  if (typeof exports !== 'undefined') {\n    module.exports = arstring;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return arstring;\n    });\n  } else {\n    global.arstring = arstring;\n  }\n\n})(typeof global !== 'undefined' ? global : window);\n"],"sourceRoot":"/source/"}