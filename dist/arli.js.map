{"version":3,"sources":["start.js","_.js","constants.js","lists.js","regex.js","_assign.js","_isString.js","_reg.js","check.js","log.js","transform.js","end.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AHlBA;AACA;AACA;AACA;AIHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ANbjIA;AACA;AACA;AACA;AACA;AACA;AACA","file":"arli.js","sourcesContent":["/*!\n * arli.js 0.2.0\n * https://elkebirmed.github.io/arli\n * (c) 2015 Mohamed Elkebir <elkebir.med@gmail.com>\n * Arli may be freely distributed under the MIT license.\n */\n(function(root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.arli = factory();\n  }\n}(this, function() {\n","  /* ***************************************************************************\n   * Public API                                                                *\n   * **************************************************************************/\n","  // Constants.\n  var CONSTANTS = {\n\n    // Arabic date separator.\n    arabicDateSeparator: '؍',\n\n    // Arabic decimal separator.\n    arabicDecimalSeparator: '٫',\n\n    // Arabic tatweel.\n    arabicTatweel: 'ـ',\n\n    // Arabic thousands separator.\n    arabicThousandsSeparator: '٬',\n  };\n","  // Lists.\n  var LISTS = {\n\n    // Indian digits format.\n    indianDigits: [\n      '٠', // Zero\n      '١', // One\n      '٢', // Two\n      '٣', // Three\n      '٤', // Four\n      '٥', // Five\n      '٦', // Six\n      '٧', // Seven\n      '٨', // Eight\n      '٩', // Nine\n    ],\n\n    // Arabic word ligatures.\n    wordLigatures: [\n      'صلى الله عليه و سلم', // Sallallahou Alayhe Wassallam\n      'جل جلاله', // Jalla Jalalouhou\n      'عليه السلام', // Alayhe Assallam\n      'رحمة الله عليه', // Rahmatu Allahi Alayhe\n      'رضي الله عنه', // Radi Allahou Anhu\n    ],\n\n    // Arabic word ligatures replacements.\n    wordLigaturesReplacements: [\n      'ﷺ', // Sallallahou Alayhe Wassallam\n      'ﷻ', // Jalla Jalalouhou\n      'ؑ', // Alayhe Assallam\n      'ؒ', // Rahmatu Allahi Alayhe\n      'ؓ', // Radi Allahou Anhu\n    ],\n\n    // Arabic punctuations.\n    punctuations: [\n      ',', // Comma\n      ';', // Semicolon\n      '?', // Question mark\n      '(', // Left parenthesis\n      ')', // Right parenthesis\n      '%', // Percent sign\n    ],\n\n    // Arabic punctuations replacements\n    punctuationsReplacements: [\n      '،', // Comma\n      '؛', // Semicolon\n      '؟', // Question mark\n      '﴾', // Left parenthesis\n      '﴿', // Right parenthesis\n      '٪', // Percent sign\n    ],\n  };\n","  // Regular expression source patterns.\n  var REGS = {\n\n    // Date format: MM/DD/YY[YY] MM.DD.YY[YY] MM-DD-YY[YY] MM,DD,YY[YY]\n    arabicDateDMY: /(?=\\D?)(31|30|(?:0[1-9]|[1-2][0-9]))(\\/|\\.|-)(12|11|10|0[1-9])(\\2)(\\d{4}|\\d{2})(?=\\D?)/,\n\n    // Date format: MM/DD/YY[YY] MM.DD.YY[YY] MM-DD-YY[YY] MM,DD,YY[YY]\n    arabicDateMDY: /(?=\\D?)(12|11|10|0[1-9])(\\/|\\.|-)(31|30|(?:0[1-9]|[1-2][0-9]))(\\2)(\\d{4}|\\d{2})(?=\\D?)/,\n\n    // Arabic tatweel.\n    arabicTatweel: /\\u0640+/,\n\n    // Number with decimal separator\n    numberWithDecimal: /(?:^|[^\\d.])(\\d+\\.\\d+)(?![.\\d])/,\n\n    // Number with decimal and thousand separators.\n    numberWithDecimalThousand: /(?:^|[^\\d.])(?!0(?!\\.))\\d{1,3}(,\\d{3})*(\\.\\d+)?(?!\\.)(?!\\d)/,\n  };\n","  /**\n   * Assign `source` properties to `destination` object if not existed in it.\n   *\n   * @private\n   * @param  {Object} destination - Destination object.\n   * @param  {Object} source - Source object.\n   * @returns {Object} Returns a new extended object.\n   */\n  function _assign(destination, source) {\n    for (var property in source) {\n      destination[property] = source[property];\n    }\n\n    return destination;\n  }\n\n  /* -------------------------------------------------------------------------*/\n","  /**\n   * Checks if `value` is a string and is not undefined or empty.\n   *\n   * @private\n   * @param  {*} value - Value to check.\n   * @returns {Boolean} Returns true if `value` is String, else otherwise.\n   */\n  function _isString(value) {\n    return (typeof value === 'string' || value instanceof String) && value !== 'undefined' && value !== '';\n  }\n\n  /* -------------------------------------------------------------------------*/\n","  /**\n   * Regular expression generator.\n   *\n   * @private\n   * @param  {RegExp} pattern - Source pattern.\n   * @param  {String} [flags] - Flags `gmiy`.\n   * @return {RegExp} Returns a new generated regular expression object.\n   */\n  function _reg(pattern, flags) {\n    return new RegExp(pattern.source, flags || '');\n  }\n\n  /* -------------------------------------------------------------------------*/\n","  // check.\n","  function log(value, options) {\n\n    if (_isString(value)) {\n      var logs = [];\n\n      return value;\n    }\n  }\n","  /**\n   * Transform a normal string to be more Arabian string.\n   *\n   * @public\n   * @param  {String} value - String to Transform.\n   * @param  {Object} [options] - Options of transforming.\n   * @param  {Boolean} [options.clean=true] - Enable or disable string cleaning.\n   * @param  {Boolean} [options.date=true] - Enable or disable date transforming.\n   * @param  {String} [options.dateFrom='all'] - What date format to get from the string (all, DMY or MDY).\n   * @param  {String} [options.dateTo='all'] - What date format to output in the string (all, DMY or MDY).\n   * @param  {Boolean} [options.digit=true] - Enable or disable digit transforming.\n   * @param  {Array} [options.excludeLigatures] - Exclude some ligatures from transforming.\n   * @param  {String} [options.excludePunc] - Exclude some punctuations from transforming.\n   * @param  {Boolean} [options.ligatures=true] - Enable or disable transforming word ligatures.\n   * @param  {Boolean} [options.numberSep=true] - Enable or disable number separators.\n   * @param  {Boolean} [options.punc=true] - Enable or disable punctuation transforming.\n   * @param  {String} [options.removeTatweel='extra'] - Remove tatweel character from the string (extra, all, none).\n   * @return {String} Returns a new transformed string.\n   */\n  function transform(value, options) {\n\n    // Assign default options.\n    options = _assign({\n      clean: true,\n      date: true,\n      dateFrom: 'all',\n      dateTo: 'all',\n      digit: true,\n      excludeLigatures: [' '],\n      excludePunc: ' ',\n      ligatures: true,\n      numberSep: true,\n      punc: true,\n      removeTatweel: 'extra',\n    }, options || {});\n\n    // Transforming the given value.\n    if (_isString(value)) {\n\n      // Cleaning the value.\n      /* istanbul ignore else */\n      if (options.clean) {\n        value = value.trim();\n      }\n\n      // Converting date formats.\n      if (options.dateTo === 'DMY') { // From MM/DD to DD/MM\n        value = value.replace(_reg(REGS.arabicDateMDY, 'gm'), '$3$2$1$4$5');\n      } else if (options.dateTo === 'MDY') { // From DD/MM to MM/DD\n        value = value.replace(_reg(REGS.arabicDateDMY, 'gm'), '$3$2$1$4$5');\n      }\n\n      // Transforming dates to the Arabic format if digit is true.\n      /* istanbul ignore else */\n      if (options.digit && options.date) {\n        if (options.dateFrom === 'all' || options.dateFrom === 'DMY') { // Get DD/MM/YY[YY]\n          value = value.replace(_reg(REGS.arabicDateDMY, 'gm'), '$1' + CONSTANTS.arabicDateSeparator + '$3' + CONSTANTS.arabicDateSeparator + '$5');\n        }\n\n        if (options.dateFrom === 'all' || options.dateFrom === 'MDY') { // Get MM/DD/YY[YY]\n          value = value.replace(_reg(REGS.arabicDateMDY, 'gm'), '$1' + CONSTANTS.arabicDateSeparator + '$3' + CONSTANTS.arabicDateSeparator + '$5');\n        }\n      }\n\n      // Transforming numbers separators.\n      /* istanbul ignore else */\n      if (options.numberSep) {\n        value = value.replace(_reg(REGS.numberWithDecimalThousand, 'gm'), function(match) {\n          match = match.replace(_reg(/,/, 'g'), CONSTANTS.arabicThousandsSeparator);\n          return match.replace(_reg(/\\./), CONSTANTS.arabicDecimalSeparator);\n        });\n\n        value = value.replace(_reg(REGS.numberWithDecimal, 'gm'), function(match) {\n          return match.replace(_reg(/\\./), CONSTANTS.arabicDecimalSeparator);\n        });\n      }\n\n      // Transforming Arabic digits to Indian digits.\n      /* istanbul ignore else */\n      if (options.digit) {\n        value = value.replace(_reg(/[0-9]/, 'g'), function(d) {\n          return LISTS.indianDigits[+d];\n        });\n      }\n\n      // Transforming Latin punctuations to Arabic.\n      /* istanbul ignore else */\n      if (options.punc) {\n        for (var i = 0; i < LISTS.punctuations.length; i++) {\n          value = value.replace(LISTS.punctuations[i], function(match) {\n            if (options.excludePunc.indexOf(match) === -1) {\n              return LISTS.punctuationsReplacements[i];\n            } else {\n              return match;\n            }\n          });\n        }\n      }\n\n      // Remove Tatweel character.\n      /* istanbul ignore else */\n      if (options.removeTatweel === 'extra') {\n        value = value.replace(REGS.arabicTatweel, CONSTANTS.arabicTatweel);\n      } else if (options.removeTatweel === 'all') {\n        value = value.replace(REGS.arabicTatweel, '');\n      }\n\n      // Transforming Arabic word ligatures.\n      /* istanbul ignore else */\n      if (options.ligatures) {\n        for (var i = 0; i < LISTS.wordLigatures.length; i++) {\n          value = value.replace(LISTS.wordLigatures[i], function(match) {\n            for (var y = 0; y < options.excludeLigatures.length; y++) {\n              if (options.excludeLigatures[y].indexOf(match) === -1) {\n                return LISTS.wordLigaturesReplacements[i];\n              } else {\n                return match;\n              }\n            }\n          });\n        }\n      }\n    }\n\n    // Converting any data type to a string type.\n    return value + '';\n  }\n\n  /* -------------------------------------------------------------------------*/\n","  return {\n    log: log,\n    transform: transform,\n    _version: '0.2.0'\n  };\n}));\n"],"sourceRoot":"/source/"}