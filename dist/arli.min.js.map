{"version":3,"sources":["arli.min.js"],"names":["global","_assign","destination","source","property","_isString","value","String","transform","string","options","date","dateFrom","dateTo","digit","excludePunc","ligatures","ligaturesDeep","numberSep","punc","removeTatweel","replace","REG_DATE_MDY","REG_DATE_DMY","ARABIC_DATE_SEP","REG_NUMBER_DT","match","ARABIC_THOUSANDS_SEP","ARABIC_DECIMAL_SEP","REG_NUMBER_D","val","INDIAN_DIGITS","exclude","RegExp","i","ARABIC_PUNC_AND_REPLACEMENTS","length","test","REG_ARABIC_TATWEEL","ARABIC_TATWEEL","ARABIC_WORD_LIGATURES","Ctor","VERSION","prototype","_VERSION","arli","exports","module","define","amd","window"],"mappings":";;;;;;CAMA,SAAUA,GAuGR,QAASC,GAAQC,EAAaC,GAC5B,IAAK,GAAIC,KAAYD,GACnBD,EAAYE,GAAYD,EAAOC,EAGjC,OAAOF,GAYT,QAASG,GAAUC,GACjB,OAAyB,gBAAVA,IAAsBA,YAAiBC,UAAqB,cAAVD,GAAmC,KAAVA,EA+C5F,QAASE,GAAUC,EAAQC,GAczB,GAbAA,EAAUT,GACRU,MAAM,EACNC,SAAU,MACVC,OAAQ,MACRC,OAAO,EACPC,YAAa,IACbC,WAAW,EACXC,cAAe,EACfC,WAAW,EACXC,MAAM,EACNC,cAAe,SACdV,OAECL,EAAUI,GAAS,CAiCrB,GA/BuB,QAAnBC,EAAQG,OACVJ,EAASA,EAAOY,QAAQC,EAAc,cACV,QAAnBZ,EAAQG,SACjBJ,EAASA,EAAOY,QAAQE,EAAc,eAIpCb,EAAQC,MAAQD,EAAQI,SACD,QAArBJ,EAAQE,UAA2C,QAArBF,EAAQE,YACxCH,EAASA,EAAOY,QAAQE,EAAc,KAAOC,EAAkB,KAAOA,EAAkB,QAGjE,QAArBd,EAAQE,UAA2C,QAArBF,EAAQE,YACxCH,EAASA,EAAOY,QAAQC,EAAc,KAAOE,EAAkB,KAAOA,EAAkB,QAK5Ff,EAASC,EAAQQ,UAAYT,EAAOY,QAAQI,EAAe,SAASC,GAElE,MADAA,GAAQA,EAAML,QAAQ,KAAMM,GACrBD,EAAML,QAAQ,IAAKO,KACvBnB,EAELA,EAASC,EAAQQ,UAAYT,EAAOY,QAAQQ,EAAc,KAAOD,EAAqB,MAAQnB,EAG9FA,EAASC,EAAQI,MAAQL,EAAOY,QAAQ,SAAU,SAASS,GACzD,MAAOC,IAAeD,KACnBrB,EAGDC,EAAQS,KAGV,IAAK,GAFDa,GAAU,GAAIC,QAAOvB,EAAQK,aAExBmB,EAAI,EAAGA,EAAIC,EAA6B,GAAGC,OAAQF,IACrDF,EAAQK,KAAKF,EAA6B,GAAGD,MAChDzB,EAASA,EAAOY,QAAQc,EAA6B,GAAGD,GAAIC,EAA6B,GAAGD,IAUlG,IAJAzB,EAAmC,UAA1BC,EAAQU,cAA4BX,EAAOY,QAAQiB,EAAoBC,GAAkB9B,EAClGA,EAAmC,QAA1BC,EAAQU,cAA0BX,EAAOY,QAAQiB,EAAoB,IAAM7B,EAGhFC,EAAQM,UACV,IAAK,GAAIkB,GAAI,EAAGA,EAAIM,EAAsBJ,OAAQF,IAE9CzB,EADE+B,EAAsBN,GAAG,IAAgC,IAA1BxB,EAAQO,cAChCR,EAAOY,QAAQmB,EAAsBN,GAAG,GAAIM,EAAsBN,GAAG,IAErEzB,EAAOY,QAAQmB,EAAsBN,GAAG,GAAIM,EAAsBN,GAAG,GAKpF,OAAOzB,GAEP,MAAO,GASX,QAASgC,MArPT,GAAIjB,GAAkB,IAGlBI,EAAqB,IAGrBO,IAEA,IACA,IACA,IACA,IACA,IACA,MAGA,IACA,IACA,IACA,IACA,IACA,MAKAI,EAAiB,IAGjBZ,EAAuB,IAGvBa,IAEA,sBACA,IACA,MAGA,WACA,MAGA,cACA,MAGA,iBACA,MAGA,eACA,MAKAT,GACF,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAIEO,EAAqB,YAGrBf,EAAe,6FAGfD,EAAe,6FAGfO,EAAe,qCAGfJ,EAAgB,oCAsDhBiB,EAAU,OA+GdD,GAAKE,UAAUC,SAAWF,EAC1BD,EAAKE,UAAUnC,UAAYA,CAG3B,IAAIqC,GAAO,GAAIJ,EAGQ,oBAAZK,SACTC,OAAOD,QAAUD,EACU,kBAAXG,SAAyBA,OAAOC,IAChDD,OAAO,WACL,MAAOH,KAGT7C,EAAO6C,KAAOA,GAGG,mBAAX7C,QAAyBA,OAASkD","file":"arli.min.js","sourcesContent":["/*!\n * arli.js 0.2.0\n * https://elkebirmed.github.io/arli\n * (c) 2015 Mohamed Elkebir <elkebir.med@gmail.com>\n * Arli may be freely distributed under the MIT license.\n */\n(function(global) {\n  /* ***************************************************************************\n   * Private constants to use inside the library.                              *\n   * **************************************************************************/\n\n  /** Arabic date separator */\n  var ARABIC_DATE_SEP = '؍';\n\n  /** Arabic decimal separator */\n  var ARABIC_DECIMAL_SEP = '٫';\n\n  /** Arabic punctuation marks and their replacements */\n  var ARABIC_PUNC_AND_REPLACEMENTS = [\n    [\n      ',', // Comma\n      ';', // Semicolon\n      '?', // Question mark\n      '(', // Left parenthesis\n      ')', // Right parenthesis\n      '%', // Percent sign\n    ],\n    [\n      '،', // Comma\n      '؛', // Semicolon\n      '؟', // Question mark\n      '﴾', // Left parenthesis\n      '﴿', // Right parenthesis\n      '٪', // Percent sign\n    ]\n  ];\n\n  /** Arabic tatweel */\n  var ARABIC_TATWEEL = 'ـ';\n\n  /** Arabic thousands separator */\n  var ARABIC_THOUSANDS_SEP = '٬';\n\n  /** Arabic word ligatures replacements */\n  var ARABIC_WORD_LIGATURES = [\n    [\n      'صلى الله عليه و سلم', // Sallallahou Alayhe Wassallam\n      'ﷺ',\n      'ؐ'\n    ],\n    [\n      'جل جلاله', // Jalla Jalalouhou\n      'ﷻ'\n    ],\n    [\n      'عليه السلام', // Alayhe Assallam\n      'ؑ'\n    ],\n    [\n      'رحمة الله عليه', // Rahmatu Allahi Alayhe\n      'ؒ'\n    ],\n    [\n      'رضي الله عنه', // Radi Allahou Anhu\n      'ؓ'\n    ]\n  ];\n\n  /** Indian digits format */\n  var INDIAN_DIGITS = [\n    '٠', // Zero\n    '١', // One\n    '٢', // Two\n    '٣', // Three\n    '٤', // Four\n    '٥', // Five\n    '٦', // Six\n    '٧', // Seven\n    '٨', // Eight\n    '٩', // Nine\n  ];\n\n  /** Arabic tatweel */\n  var REG_ARABIC_TATWEEL = /\\u0640+/gm;\n\n  /** Date format: DD/MM/YY[YY] DD.MM.YY[YY] DD-MM-YY[YY] DD,MM,YY[YY] */\n  var REG_DATE_DMY = /(?=\\D?)(31|30|(?:0[1-9]|[1-2][0-9]))(\\/|\\.|-|,)(12|11|10|0[1-9])(\\2)(\\d{4}|\\d{2})(?=\\D?)/gm;\n\n  /** Date format: MM/DD/YY[YY] MM.DD.YY[YY] MM-DD-YY[YY] MM,DD,YY[YY] */\n  var REG_DATE_MDY = /(?=\\D?)(12|11|10|0[1-9])(\\/|\\.|-|,)(31|30|(?:0[1-9]|[1-2][0-9]))(\\2)(\\d{4}|\\d{2})(?=\\D?)/gm;\n\n  /** Full number with decimal separator */\n  var REG_NUMBER_D = /((?:0[0-9])|(?:[1-9]\\d+))\\.(\\d+)/gm;\n\n  /** Full number with decimal and thousand separators */\n  var REG_NUMBER_DT = /[1-9][0-9]{0,2}(?:,\\d{3})+\\.\\d+/gm;\n\n  /* ***************************************************************************\n   * Private functions to use inside the library.                              *\n   * **************************************************************************/\n\n  /**\n   * Assign `source` properties to `destination` object if not existed in it.\n   *\n   * @private\n   * @param  {Object} destination - Destination object.\n   * @param  {Object} source - Source object.\n   * @returns {Object} Returns a new extended object.\n   */\n  function _assign(destination, source) {\n    for (var property in source) {\n      destination[property] = source[property];\n    }\n\n    return destination;\n  }\n\n  /* -------------------------------------------------------------------------*/\n\n  /**\n   * Checks if `value` is a string and is not undefined or empty.\n   *\n   * @private\n   * @param  {*} value - Value to check.\n   * @returns {Boolean} Returns true if `value` is String, else otherwise.\n   */\n  function _isString(value) {\n    return (typeof value === 'string' || value instanceof String) && value !== 'undefined' && value !== '';\n  }\n\n  /* -------------------------------------------------------------------------*/\n\n  /**\n   * Checks if `value` is a function.\n   *\n   * @private\n   * @param  {*}  value - Value to check.\n   * @returns {Boolean} Returns true if `value` is object, else otherwise.\n   */\n  function _isFunction(value) {\n    var getType = {};\n    return value && getType.toString.call(value) === '[object Function]';\n  }\n\n  /* ***************************************************************************\n   * Public constants to be exported with the module.                          *\n   * **************************************************************************/\n\n  /** Used as the semantic version number. */\n  var VERSION = '0.2.0';\n\n  /* ***************************************************************************\n   * Public functions to be exported with the module.                          *\n   * **************************************************************************/\n\n  /**\n   * Transform a string to be more Arabian.\n   *\n   * @public\n   * @param  {String} string - String to Transform.\n   * @param  {Object} [options] - Options of transforming.\n   * @param  {Boolean} [options.date=true] - Enable or disable date transforming.\n   * @param  {String} [options.dateFrom='all|DMY|MDY'] - What date format to get from the string.\n   * @param  {String} [options.dateTo='all|DMY|MDY'] - What date format to output in the string.\n   * @param  {Boolean} [options.digit=true] - Enable or disable digit transforming.\n   * @param  {String} [options.excludePunc] - Exclude some punctuations from transforming by putting a regular expression source like: `',|;'`.\n   * @param  {Boolean} [options.ligatures=true] - Enable or disable transforming word ligatures.\n   * @param  {Number} [options.ligaturesDeep=1] - More ligatures are deeper so you can pass a deep level ti look for.\n   * @param  {Boolean} [options.punc=true] - Enable or disable punctuation transforming.\n   * @param  {String} [options.removeTatweel='extra|all|none'] - Remove extra tatweel or all or leave it as is.\n   * @returns {String} Returns a new transformed string.\n   *\n   * @examples\n   */\n  function transform(string, options) {\n    options = _assign({ // Assign default options.\n      date: true,\n      dateFrom: 'all',\n      dateTo: 'all',\n      digit: true,\n      excludePunc: ' ',\n      ligatures: true,\n      ligaturesDeep: 1,\n      numberSep: true,\n      punc: true,\n      removeTatweel: 'extra',\n    }, options || {});\n\n    if (_isString(string)) {\n      // Converting date formats.\n      if (options.dateTo === 'DMY') { // From MM/DD to DD/MM\n        string = string.replace(REG_DATE_MDY, '$3$2$1$4$5');\n      } else if (options.dateTo === 'MDY') { // From DD/MM to MM/DD\n        string = string.replace(REG_DATE_DMY, '$3$2$1$4$5');\n      }\n\n      // Transforming dates to the Arabic format if digit is true.\n      if (options.date && options.digit) {\n        if (options.dateFrom === 'all' || options.dateFrom === 'DMY') { // Get DD/MM/YY[YY]\n          string = string.replace(REG_DATE_DMY, '$1' + ARABIC_DATE_SEP + '$3' + ARABIC_DATE_SEP + '$5');\n        }\n\n        if (options.dateFrom === 'all' || options.dateFrom === 'MDY') { // Get MM/DD/YY[YY]\n          string = string.replace(REG_DATE_MDY, '$1' + ARABIC_DATE_SEP + '$3' + ARABIC_DATE_SEP + '$5');\n        }\n      }\n\n      // Transforming numbers separators.\n      string = options.numberSep ? string.replace(REG_NUMBER_DT, function(match) {\n        match = match.replace(/,/g, ARABIC_THOUSANDS_SEP);\n        return match.replace('.', ARABIC_DECIMAL_SEP);\n      }) : string;\n\n      string = options.numberSep ? string.replace(REG_NUMBER_D, '$1' + ARABIC_DECIMAL_SEP + '$2') : string;\n\n      // Transforming Arabic digits to Indian digits.\n      string = options.digit ? string.replace(/[0-9]/g, function(val) {\n        return INDIAN_DIGITS[+val];\n      }) : string;\n\n      // Transforming Latin punctuations to Arabic.\n      if (options.punc) {\n        var exclude = new RegExp(options.excludePunc);\n\n        for (var i = 0; i < ARABIC_PUNC_AND_REPLACEMENTS[0].length; i++) {\n          if (!exclude.test(ARABIC_PUNC_AND_REPLACEMENTS[0][i])) {\n            string = string.replace(ARABIC_PUNC_AND_REPLACEMENTS[0][i], ARABIC_PUNC_AND_REPLACEMENTS[1][i]);\n          }\n        }\n      }\n\n      // Remove Tatweel\n      string = options.removeTatweel === 'extra' ? string.replace(REG_ARABIC_TATWEEL, ARABIC_TATWEEL) : string;\n      string = options.removeTatweel === 'all' ? string.replace(REG_ARABIC_TATWEEL, '') : string;\n\n      // Transforming word ligatures.\n      if (options.ligatures) {\n        for (var i = 0; i < ARABIC_WORD_LIGATURES.length; i++) {\n          if (ARABIC_WORD_LIGATURES[i][2] && options.ligaturesDeep === 2) {\n            string = string.replace(ARABIC_WORD_LIGATURES[i][0], ARABIC_WORD_LIGATURES[i][2]);\n          } else {\n            string = string.replace(ARABIC_WORD_LIGATURES[i][0], ARABIC_WORD_LIGATURES[i][1]);\n          }\n        }\n      }\n\n      return string;\n    } else {\n      return '';\n    }\n  }\n\n  /* ***************************************************************************\n   * Exporting the arli module to the outside world!                           *\n   * **************************************************************************/\n\n  /** Constructor */\n  function Ctor() {}\n\n  /** Prototypes */\n  Ctor.prototype._VERSION = VERSION;\n  Ctor.prototype.transform = transform;\n\n  /** arli object from Ctor */\n  var arli = new Ctor();\n\n  /** CommonJS, AMD, script tag */\n  if (typeof exports !== 'undefined') {\n    module.exports = arli;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return arli;\n    });\n  } else {\n    global.arli = arli;\n  }\n\n})(typeof global !== 'undefined' ? global : window);\n"],"sourceRoot":"/source/"}