{"version":3,"sources":["index.js"],"names":["global","_initStr","value","String","_isIn","arr","option","Array","isArray","indexOf","_regType","type","negative","result","_regs","arabize","str","options","defaultOptions","_isArray","length","dateize","numerize","removeDash","i","_arSpecialChars","replace","_enSpecialChars","count","match","countRest","reverse","regArabicDate","extract","has","test","how","howRest","n","_arabicNumbers","remove","extra","ra","ran","ral","raln","ras","rasn","raa","raan","rae","raen","rap","rapn","rad","radn","VERSION","arli","_VERSION","exports","module","define","amd","window"],"mappings":"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","file":"arli.min.js","sourcesContent":["/**\n * @license\n * arli.js 0.0.1\n * https://elkebirmed.github.io/arli\n * (c) 2015 Mohamed Elkebir <elkebir.med@gmail.com>\n * Arli may be freely distributed under the MIT license.\n */\n(function(global) {\n\n  /*****************************************************************************\n   * Private constants to use inside the library.                              *\n   ****************************************************************************/\n\n  /** Regular expression patterns. */\n  var _regs = {\n    ra:   /[\\u0621-\\u0652]/g, // Arabic characters.\n    ran:  /[^\\u0621-\\u0652]/g, // Non Arabic characters.\n    ral:  /[\\u0621-\\u063A\\u0641-\\u064A]/g, // Arabic letters.\n    raln: /[^\\u0621-\\u063A\\u0641-\\u064A]/g, // Non Arabic letters.\n    ras:  /[\\u0621-\\u063A\\u0640-\\u0652]/g, // Strict Arabic characters.\n    rasn: /[^\\u0621-\\u063A\\u0640-\\u0652]/g, // Non strict Arabic characters.\n    raa:  /[\\u0600-\\u06FF]/g, // All Arabic standard characters.\n    raan: /[^\\u0600-\\u06FF]/g, // Non all Arabic.\n    rae:  /[\\u0600-\\u06FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/g, // Every Arabic characters.\n    raen: /[^\\u0600-\\u06FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/g, // Non every Arabic characters.\n    rap:  /[\\u064B-\\u0652]/g, // Arabic punctuation characters.\n    rapn: /[^\\u064B-\\u0652]/g, // Non Arabic punctuation characters.\n    rad:  /[\\u0660-\\u0669]/g, // Arabic digits.\n    radn: /[^\\u0660-\\u0669]/g, // Non Arabic digits.\n  };\n\n  /** Arabic numbers list. */\n  var _arabicNumbers = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];\n\n  /** Special Arabic characters. */\n  var _arSpecialChars = [\n    '،', // Comma.\n    '؛', // SemiColon.\n    '؟', // Question Mark.\n    '٪', // Percent Sign.\n    '٭', // Asterisk.\n    '﴿', // Right parenthesis.\n    '﴾', // Left parenthesis.\n  ];\n\n  /** Special English characters. */\n  var _enSpecialChars = [\n    ',', // Comma.\n    ';', // SemiColon.\n    '?', // Question Mark.\n    '%', // Percent Sign.\n    '*', // Asterisk.\n    ')', // Right parenthesis.\n    '(', // Left parenthesis.\n  ];\n\n  /*****************************************************************************\n   * Private functions to use inside the library.                              *\n   ****************************************************************************/\n\n  /**\n   * Checks if `value` is classified as a `String` primitive or object, and it's not empty.\n   *\n   * @private\n   * @param   {*} value - A value to check.\n   * @returns {Boolean} Returns `true` if `value` is a string, `false` otherwise.\n   */\n  function _initStr(value) {\n    return (typeof value === 'string' || value instanceof String) && value !== 'undefined' && value !== '';\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Checks if a `option` is in the `arr` array.\n   *\n   * @private\n   * @param {Array} arr - The array to search in.\n   * @param {String} option - The option to find in the array.\n   * @return {Boolean} Returns `true` if `option` is inside `arr`, `false` otherwise.\n   */\n  function _isIn(arr, option) {\n    return Array.isArray(arr) && arr.indexOf(option) !== -1 ? true : false;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Extract a specified RegExp pattern from `_regs` object.\n   *\n   * @private\n   * @param {String} [type] - A pattern to be used.\n   * @param {Boolean} [negative] - Get the nehative pattern if set to `true`.\n   * @returns {RegExp} Returns a regular expression pattern.\n   */\n  function _regType(type, negative) {\n    var result;\n\n    switch (type) {\n      case 'strict':\n        result = 'ras';\n        break;\n      case 'all':\n        result = 'raa';\n        break;\n      case 'letter':\n        result = 'ral';\n        break;\n      case 'every':\n        result = 'rae';\n        break;\n      case 'punct':\n        result = 'rap';\n        break;\n      case 'digit':\n        result = 'rad';\n        break;\n      default:\n        result = 'ra';\n    }\n\n    return negative ? _regs[result + 'n'] : _regs[result];\n  }\n\n  /*****************************************************************************\n   * Public constants to be exported with the module.                          *\n   ****************************************************************************/\n\n  /** Used as the semantic version number. */\n  var VERSION = '0.0.1';\n\n  /*****************************************************************************\n   * Public functions to be exported with the module.                          *\n   ****************************************************************************/\n\n  /**\n   * Convert some characters to make the text more Arabian.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to convert.\n   * @param {Array} [options=['date', 'number', 'dash', 'char']] - Decide which features to use in the output.\n   * @returns {String} Return an Arabian string.\n   * @example\n   *\n   * arli.arabize('0123456789%(,;*)?');\n   * // => '۰۱۲۳۴۵۶۷۸۹٪﴾،؛٭﴿؟''\n   *\n   * arli.arabize('0123456789%(,;*)?', ['char']);\n   * // => '0123456789٪﴾،؛٭﴿؟''\n   */\n  function arabize(str, options) {\n    if (_initStr(str)) {\n      var defaultOptions = ['date', 'number', 'dash', 'char'];\n      options = options && _isArray(options) && options.length > 0 ? options : defaultOptions;\n\n      str = _isIn(options, 'date') && !_isIn(options, 'date-reverse') ? dateize(str) : str;\n      str = _isIn(options, 'date-reverse') ? dateize(str, true) : str;\n      str = _isIn(options, 'number') || _isIn(options, 'date') || _isIn(options, 'date-reverse') ? numerize(str) : str;\n      str = _isIn(options, 'dash') && !_isIn(options, 'dasg-extra') ? removeDash(str) : str;\n      str = _isIn(options, 'dash-extra') ? removeDash(str, true) : str;\n\n      if (_isIn(options, 'char')) {\n        for (var i = 0; i < _arSpecialChars.length; i++) {\n          str = str.replace(_enSpecialChars[i], _arSpecialChars[i]);\n        }\n      }\n\n      return str;\n    } else {\n      return str;\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Count the matched characters in the string.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to count in.\n   * @param {String} [type] - A regular expression pattern to be used.\n   * @returns {Number} Return the number of the matched characters in the string.\n   * @example\n   *\n   * arli.count('Hello!');\n   * // => 0\n   *\n   * arli.count('Hello! مرحبا');\n   * // => 5\n   *\n   * arli.count('Hello! مرحبا ۱۲۳', 'digit');\n   * // => 3\n   */\n  function count(str, type) {\n    if (_initStr(str)) {\n      return (str.match(_regType(type)) || '').length;\n    } else {\n      return 0;\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Count the non matched characters in the string.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to count in.\n   * @param {String} [type] - A regular expression pattern to be used.\n   * @returns {Number} Return the number of the non matched characters in the string.\n   * @example\n   *\n   * arli.countRest('Hello!');\n   * // => 6\n   *\n   * arli.countRest('Hello! مرحبا');\n   * // => 7\n   *\n   * arli.countRest('Hello! مرحبا ۱۲۳', 'digit');\n   * // => 13\n   */\n  function countRest(str, type) {\n    if (_initStr(str)) {\n      return (str.match(_regType(type, true)) || '').length;\n    } else {\n      return 0;\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Convert a date string to an Arabic format.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to convert.\n   * @param {Boolean} [reverse] - Reverse the month and day in the output if set to true.\n   * @returns {String} Return an Arabic date format\n   * @example\n   *\n   * arli.dateize('20,11,2015 20/11/2015 20-11-2015 20.11.2015 20 11 2015');\n   * // => '20؍11؍2015 20؍11؍2015 20؍11؍2015 20؍11؍2015 20؍11؍2015'\n   *\n   * arli.dateize('20/11/2015', true);\n   * // => '11؍20؍2015' // Past it to an RTL env to see it right\n   */\n  function dateize(str, reverse) {\n    if (_initStr(str)) {\n      var regArabicDate = /\\b([\\d]{2})[\\./,-\\s]([\\d]{2})[\\./,-\\s]([\\d]{2}|[\\d]{4})\\b/g;\n      return reverse ? str.replace(regArabicDate, '$2' + '؍' + '$1' + '؍' + '$3') : str.replace(regArabicDate, '$1' + '؍' + '$2' + '؍' + '$3');\n    } else {\n      return str;\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Output the matched characters from the string.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to output from.\n   * @param {String} [type] - A regular expression pattern to be used.\n   * @returns {String} Return the matched characters.\n   * @example\n   *\n   * arli.extract('Hello مرحبا');\n   * // => 'مرحبا'\n   *\n   * arli.extract('Hello مرحبا ۱۲۳', 'digit');\n   * // => '۱۲۳'\n   */\n  function extract(str, type) {\n    if (_initStr(str)) {\n      return str.replace(_regType(type, true), '');\n    } else {\n      return str;\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Checks if the string has the matched pattern.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to check.\n   * @param {String} [type] - A regular expression pattern to be used.\n   * @returns {Boolean} Return `true` if the pattern match, `else` otherwise.\n   * @example\n   *\n   * arli.has('Hello مرحبا');\n   * // => true\n   *\n   * arli.has('Hello مرحبا ۱۲۳', 'digit');\n   * // => true\n   *\n   * arli.has('Hello مرحبا', 'digit');\n   * // => false\n   */\n  function has(str, type) {\n    if (_initStr(str)) {\n      return _regType(type).test(str) ? true : false;\n    } else {\n      return false;\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Calculate the percentage of the matched pattern in the string.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to calculate in.\n   * @param {String} [type] - A regular expression pattern to be used.\n   * @returns {Number} Return the percentage of the matched pattern.\n   * @example\n   *\n   * arli.how('Hello مرحبا');\n   * // => 45.45454545454545\n   *\n   * arli.how('Hello مرحبا،،،، ۱۲۳', 'char');\n   * // => 26.31578947368421\n   */\n  function how(str, type) {\n    if (has(str, type)) {\n      return (count(str, type) / str.length) * 100;\n    } else {\n      return 0;\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Calculate the percentage of the non matched pattern in the string.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to calculate in.\n   * @param {String} [type] - A regular expression pattern to be used.\n   * @returns {Number} Return the percentage of the non matched pattern.\n   * @example\n   *\n   * arli.howRest('Hello مرحبا');\n   * // => 54.54545454545455\n   *\n   * arli.howRest('Hello مرحبا،،،، ۱۲۳', 'char');\n   * // => 73.6842105263158\n   */\n  function howRest(str, type) {\n    return 100 - how(str, type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Convert a number string to an Arabic format.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to convert.\n   * @returns {String} Return an Arabic date format\n   * @example\n   *\n   * arli.numerize('0123456789');\n   * // => '۰۱۲۳۴۵۶۷۸۹'\n   */\n  function numerize(str) {\n    if (_initStr(str)) {\n      return str.replace(/[0-9]/g, function(n) {\n        return _arabicNumbers[+n];\n      });\n    } else {\n      return str;\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Output the non matched characters from the string.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to output from.\n   * @param {String} [type] - A regular expression pattern to be used.\n   * @returns {String} Return the non matched characters.\n   * @example\n   *\n   * arli.remove('Hello مرحبا');\n   * // => 'Hello '\n   *\n   * arli.remove('Hello مرحبا ۱۲۳', 'digit');\n   * // => 'Hello  مرحبا'\n   */\n  function remove(str, type) {\n    if (_initStr(str)) {\n      return str.replace(_regType(type), '');\n    } else {\n      return str;\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Remove the dash or Tatweel character from the string.\n   *\n   * @static\n   * @memberOf arli\n   * @param {String} str - The string to remove from.\n   * @param {Boolean} [extra] - Leave a single dash if set to true\n   * @returns {String} Return the new prepared string.\n   * @example\n   *\n   * arli.removeDash('مرحبــــــــــا');\n   * // => 'مرحبا'\n   *\n   * arli.removeDash('مرحبــــــــــا', true);\n   * // => 'مرحبـا'\n   */\n  function removeDash(str, extra) {\n    if (_initStr(str)) {\n      return extra ? str.replace(/ـ{2,}/g, 'ـ') : str.replace(/ـ/g, '');\n    } else {\n      return str;\n    }\n  }\n\n  /*****************************************************************************\n   * Exporting the arli module to the outside world!                           *\n   ****************************************************************************/\n\n  var arli = {\n    _VERSION: VERSION,\n    arabize: arabize,\n    count: count,\n    countRest: countRest,\n    dateize: dateize,\n    extract: extract,\n    has: has,\n    how: how,\n    howRest: howRest,\n    numerize: numerize,\n    remove: remove,\n    removeDash: removeDash,\n  };\n\n  // CommonJS, AMD, script tag\n  if (typeof exports !== 'undefined') {\n    module.exports = arli;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return arli;\n    });\n  } else {\n    global.arli = arli;\n  }\n\n})(typeof global !== 'undefined' ? global : window);\n"],"sourceRoot":"/source/"}